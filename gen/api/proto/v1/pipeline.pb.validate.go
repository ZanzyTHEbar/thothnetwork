// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/proto/v1/pipeline.proto

package thothnetworkv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProcessingStage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProcessingStage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessingStage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessingStageMultiError, or nil if none found.
func (m *ProcessingStage) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessingStage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Config

	if len(errors) > 0 {
		return ProcessingStageMultiError(errors)
	}

	return nil
}

// ProcessingStageMultiError is an error wrapping multiple validation errors
// returned by ProcessingStage.ValidateAll() if the designated constraints
// aren't met.
type ProcessingStageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessingStageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessingStageMultiError) AllErrors() []error { return m }

// ProcessingStageValidationError is the validation error returned by
// ProcessingStage.Validate if the designated constraints aren't met.
type ProcessingStageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessingStageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessingStageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessingStageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessingStageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessingStageValidationError) ErrorName() string { return "ProcessingStageValidationError" }

// Error satisfies the builtin error interface
func (e ProcessingStageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessingStage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessingStageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessingStageValidationError{}

// Validate checks the field values on Pipeline with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pipeline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pipeline with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineMultiError, or nil
// if none found.
func (m *Pipeline) ValidateAll() error {
	return m.validate(true)
}

func (m *Pipeline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InputTopic

	// no validation rules for OutputTopic

	if len(errors) > 0 {
		return PipelineMultiError(errors)
	}

	return nil
}

// PipelineMultiError is an error wrapping multiple validation errors returned
// by Pipeline.ValidateAll() if the designated constraints aren't met.
type PipelineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineMultiError) AllErrors() []error { return m }

// PipelineValidationError is the validation error returned by
// Pipeline.Validate if the designated constraints aren't met.
type PipelineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineValidationError) ErrorName() string { return "PipelineValidationError" }

// Error satisfies the builtin error interface
func (e PipelineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipeline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineValidationError{}

// Validate checks the field values on CreatePipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePipelineRequestMultiError, or nil if none found.
func (m *CreatePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePipelineRequestValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePipelineRequestValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePipelineRequestValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InputTopic

	// no validation rules for OutputTopic

	if len(errors) > 0 {
		return CreatePipelineRequestMultiError(errors)
	}

	return nil
}

// CreatePipelineRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePipelineRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePipelineRequestMultiError) AllErrors() []error { return m }

// CreatePipelineRequestValidationError is the validation error returned by
// CreatePipelineRequest.Validate if the designated constraints aren't met.
type CreatePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePipelineRequestValidationError) ErrorName() string {
	return "CreatePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePipelineRequestValidationError{}

// Validate checks the field values on CreatePipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePipelineResponseMultiError, or nil if none found.
func (m *CreatePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePipelineResponseMultiError(errors)
	}

	return nil
}

// CreatePipelineResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePipelineResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePipelineResponseMultiError) AllErrors() []error { return m }

// CreatePipelineResponseValidationError is the validation error returned by
// CreatePipelineResponse.Validate if the designated constraints aren't met.
type CreatePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePipelineResponseValidationError) ErrorName() string {
	return "CreatePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePipelineResponseValidationError{}

// Validate checks the field values on GetPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPipelineRequestMultiError, or nil if none found.
func (m *GetPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPipelineRequestMultiError(errors)
	}

	return nil
}

// GetPipelineRequestMultiError is an error wrapping multiple validation errors
// returned by GetPipelineRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelineRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelineRequestMultiError) AllErrors() []error { return m }

// GetPipelineRequestValidationError is the validation error returned by
// GetPipelineRequest.Validate if the designated constraints aren't met.
type GetPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelineRequestValidationError) ErrorName() string {
	return "GetPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelineRequestValidationError{}

// Validate checks the field values on GetPipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPipelineResponseMultiError, or nil if none found.
func (m *GetPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPipelineResponseMultiError(errors)
	}

	return nil
}

// GetPipelineResponseMultiError is an error wrapping multiple validation
// errors returned by GetPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelineResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelineResponseMultiError) AllErrors() []error { return m }

// GetPipelineResponseValidationError is the validation error returned by
// GetPipelineResponse.Validate if the designated constraints aren't met.
type GetPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelineResponseValidationError) ErrorName() string {
	return "GetPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelineResponseValidationError{}

// Validate checks the field values on UpdatePipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePipelineRequestMultiError, or nil if none found.
func (m *UpdatePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePipelineRequestValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePipelineRequestValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePipelineRequestValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InputTopic

	// no validation rules for OutputTopic

	if len(errors) > 0 {
		return UpdatePipelineRequestMultiError(errors)
	}

	return nil
}

// UpdatePipelineRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePipelineRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePipelineRequestMultiError) AllErrors() []error { return m }

// UpdatePipelineRequestValidationError is the validation error returned by
// UpdatePipelineRequest.Validate if the designated constraints aren't met.
type UpdatePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePipelineRequestValidationError) ErrorName() string {
	return "UpdatePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePipelineRequestValidationError{}

// Validate checks the field values on UpdatePipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePipelineResponseMultiError, or nil if none found.
func (m *UpdatePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePipelineResponseMultiError(errors)
	}

	return nil
}

// UpdatePipelineResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePipelineResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePipelineResponseMultiError) AllErrors() []error { return m }

// UpdatePipelineResponseValidationError is the validation error returned by
// UpdatePipelineResponse.Validate if the designated constraints aren't met.
type UpdatePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePipelineResponseValidationError) ErrorName() string {
	return "UpdatePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePipelineResponseValidationError{}

// Validate checks the field values on DeletePipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePipelineRequestMultiError, or nil if none found.
func (m *DeletePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePipelineRequestMultiError(errors)
	}

	return nil
}

// DeletePipelineRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePipelineRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePipelineRequestMultiError) AllErrors() []error { return m }

// DeletePipelineRequestValidationError is the validation error returned by
// DeletePipelineRequest.Validate if the designated constraints aren't met.
type DeletePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePipelineRequestValidationError) ErrorName() string {
	return "DeletePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePipelineRequestValidationError{}

// Validate checks the field values on DeletePipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePipelineResponseMultiError, or nil if none found.
func (m *DeletePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePipelineResponseMultiError(errors)
	}

	return nil
}

// DeletePipelineResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePipelineResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePipelineResponseMultiError) AllErrors() []error { return m }

// DeletePipelineResponseValidationError is the validation error returned by
// DeletePipelineResponse.Validate if the designated constraints aren't met.
type DeletePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePipelineResponseValidationError) ErrorName() string {
	return "DeletePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePipelineResponseValidationError{}

// Validate checks the field values on ListPipelinesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelinesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipelinesRequestMultiError, or nil if none found.
func (m *ListPipelinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPipelinesRequestMultiError(errors)
	}

	return nil
}

// ListPipelinesRequestMultiError is an error wrapping multiple validation
// errors returned by ListPipelinesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPipelinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelinesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelinesRequestMultiError) AllErrors() []error { return m }

// ListPipelinesRequestValidationError is the validation error returned by
// ListPipelinesRequest.Validate if the designated constraints aren't met.
type ListPipelinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelinesRequestValidationError) ErrorName() string {
	return "ListPipelinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelinesRequestValidationError{}

// Validate checks the field values on ListPipelinesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelinesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipelinesResponseMultiError, or nil if none found.
func (m *ListPipelinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPipelinesResponseValidationError{
					field:  fmt.Sprintf("Pipelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPipelinesResponseMultiError(errors)
	}

	return nil
}

// ListPipelinesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPipelinesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPipelinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelinesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelinesResponseMultiError) AllErrors() []error { return m }

// ListPipelinesResponseValidationError is the validation error returned by
// ListPipelinesResponse.Validate if the designated constraints aren't met.
type ListPipelinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelinesResponseValidationError) ErrorName() string {
	return "ListPipelinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelinesResponseValidationError{}

// Validate checks the field values on ProcessMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessMessageRequestMultiError, or nil if none found.
func (m *ProcessMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineId

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessMessageRequestMultiError(errors)
	}

	return nil
}

// ProcessMessageRequestMultiError is an error wrapping multiple validation
// errors returned by ProcessMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type ProcessMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessMessageRequestMultiError) AllErrors() []error { return m }

// ProcessMessageRequestValidationError is the validation error returned by
// ProcessMessageRequest.Validate if the designated constraints aren't met.
type ProcessMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessMessageRequestValidationError) ErrorName() string {
	return "ProcessMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessMessageRequestValidationError{}

// Validate checks the field values on ProcessMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessMessageResponseMultiError, or nil if none found.
func (m *ProcessMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessMessageResponseMultiError(errors)
	}

	return nil
}

// ProcessMessageResponseMultiError is an error wrapping multiple validation
// errors returned by ProcessMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type ProcessMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessMessageResponseMultiError) AllErrors() []error { return m }

// ProcessMessageResponseValidationError is the validation error returned by
// ProcessMessageResponse.Validate if the designated constraints aren't met.
type ProcessMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessMessageResponseValidationError) ErrorName() string {
	return "ProcessMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessMessageResponseValidationError{}

// Validate checks the field values on StartPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartPipelineRequestMultiError, or nil if none found.
func (m *StartPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return StartPipelineRequestMultiError(errors)
	}

	return nil
}

// StartPipelineRequestMultiError is an error wrapping multiple validation
// errors returned by StartPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type StartPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPipelineRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPipelineRequestMultiError) AllErrors() []error { return m }

// StartPipelineRequestValidationError is the validation error returned by
// StartPipelineRequest.Validate if the designated constraints aren't met.
type StartPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPipelineRequestValidationError) ErrorName() string {
	return "StartPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPipelineRequestValidationError{}

// Validate checks the field values on StartPipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartPipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartPipelineResponseMultiError, or nil if none found.
func (m *StartPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return StartPipelineResponseMultiError(errors)
	}

	return nil
}

// StartPipelineResponseMultiError is an error wrapping multiple validation
// errors returned by StartPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type StartPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartPipelineResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartPipelineResponseMultiError) AllErrors() []error { return m }

// StartPipelineResponseValidationError is the validation error returned by
// StartPipelineResponse.Validate if the designated constraints aren't met.
type StartPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartPipelineResponseValidationError) ErrorName() string {
	return "StartPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartPipelineResponseValidationError{}

// Validate checks the field values on StopPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopPipelineRequestMultiError, or nil if none found.
func (m *StopPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return StopPipelineRequestMultiError(errors)
	}

	return nil
}

// StopPipelineRequestMultiError is an error wrapping multiple validation
// errors returned by StopPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type StopPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopPipelineRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopPipelineRequestMultiError) AllErrors() []error { return m }

// StopPipelineRequestValidationError is the validation error returned by
// StopPipelineRequest.Validate if the designated constraints aren't met.
type StopPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopPipelineRequestValidationError) ErrorName() string {
	return "StopPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopPipelineRequestValidationError{}

// Validate checks the field values on StopPipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopPipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopPipelineResponseMultiError, or nil if none found.
func (m *StopPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return StopPipelineResponseMultiError(errors)
	}

	return nil
}

// StopPipelineResponseMultiError is an error wrapping multiple validation
// errors returned by StopPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type StopPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopPipelineResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopPipelineResponseMultiError) AllErrors() []error { return m }

// StopPipelineResponseValidationError is the validation error returned by
// StopPipelineResponse.Validate if the designated constraints aren't met.
type StopPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopPipelineResponseValidationError) ErrorName() string {
	return "StopPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopPipelineResponseValidationError{}
