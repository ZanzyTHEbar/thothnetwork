// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/proto/v1/device.proto

package thothnetworkv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Device) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeviceMultiError, or nil if none found.
func (m *Device) ValidateAll() error {
	return m.validate(true)
}

func (m *Device) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetLastSeen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "LastSeen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "LastSeen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastSeen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "LastSeen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceMultiError(errors)
	}

	return nil
}

// DeviceMultiError is an error wrapping multiple validation errors returned by
// Device.ValidateAll() if the designated constraints aren't met.
type DeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceMultiError) AllErrors() []error { return m }

// DeviceValidationError is the validation error returned by Device.Validate if
// the designated constraints aren't met.
type DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceValidationError) ErrorName() string { return "DeviceValidationError" }

// Error satisfies the builtin error interface
func (e DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceValidationError{}

// Validate checks the field values on RegisterDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterDeviceRequestMultiError, or nil if none found.
func (m *RegisterDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Metadata

	if len(errors) > 0 {
		return RegisterDeviceRequestMultiError(errors)
	}

	return nil
}

// RegisterDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterDeviceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterDeviceRequestMultiError) AllErrors() []error { return m }

// RegisterDeviceRequestValidationError is the validation error returned by
// RegisterDeviceRequest.Validate if the designated constraints aren't met.
type RegisterDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDeviceRequestValidationError) ErrorName() string {
	return "RegisterDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDeviceRequestValidationError{}

// Validate checks the field values on RegisterDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterDeviceResponseMultiError, or nil if none found.
func (m *RegisterDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterDeviceResponseValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterDeviceResponseMultiError(errors)
	}

	return nil
}

// RegisterDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterDeviceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterDeviceResponseMultiError) AllErrors() []error { return m }

// RegisterDeviceResponseValidationError is the validation error returned by
// RegisterDeviceResponse.Validate if the designated constraints aren't met.
type RegisterDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDeviceResponseValidationError) ErrorName() string {
	return "RegisterDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDeviceResponseValidationError{}

// Validate checks the field values on GetDeviceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceRequestMultiError, or nil if none found.
func (m *GetDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetDeviceRequestMultiError(errors)
	}

	return nil
}

// GetDeviceRequestMultiError is an error wrapping multiple validation errors
// returned by GetDeviceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceRequestMultiError) AllErrors() []error { return m }

// GetDeviceRequestValidationError is the validation error returned by
// GetDeviceRequest.Validate if the designated constraints aren't met.
type GetDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceRequestValidationError) ErrorName() string { return "GetDeviceRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceRequestValidationError{}

// Validate checks the field values on GetDeviceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceResponseMultiError, or nil if none found.
func (m *GetDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeviceResponseValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeviceResponseMultiError(errors)
	}

	return nil
}

// GetDeviceResponseMultiError is an error wrapping multiple validation errors
// returned by GetDeviceResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceResponseMultiError) AllErrors() []error { return m }

// GetDeviceResponseValidationError is the validation error returned by
// GetDeviceResponse.Validate if the designated constraints aren't met.
type GetDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceResponseValidationError) ErrorName() string {
	return "GetDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceResponseValidationError{}

// Validate checks the field values on UpdateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceRequestMultiError, or nil if none found.
func (m *UpdateDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Metadata

	if len(errors) > 0 {
		return UpdateDeviceRequestMultiError(errors)
	}

	return nil
}

// UpdateDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceRequestMultiError) AllErrors() []error { return m }

// UpdateDeviceRequestValidationError is the validation error returned by
// UpdateDeviceRequest.Validate if the designated constraints aren't met.
type UpdateDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceRequestValidationError) ErrorName() string {
	return "UpdateDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceRequestValidationError{}

// Validate checks the field values on UpdateDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceResponseMultiError, or nil if none found.
func (m *UpdateDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeviceResponseValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDeviceResponseMultiError(errors)
	}

	return nil
}

// UpdateDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceResponseMultiError) AllErrors() []error { return m }

// UpdateDeviceResponseValidationError is the validation error returned by
// UpdateDeviceResponse.Validate if the designated constraints aren't met.
type UpdateDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceResponseValidationError) ErrorName() string {
	return "UpdateDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceResponseValidationError{}

// Validate checks the field values on DeleteDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceRequestMultiError, or nil if none found.
func (m *DeleteDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDeviceRequestMultiError(errors)
	}

	return nil
}

// DeleteDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceRequestMultiError) AllErrors() []error { return m }

// DeleteDeviceRequestValidationError is the validation error returned by
// DeleteDeviceRequest.Validate if the designated constraints aren't met.
type DeleteDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceRequestValidationError) ErrorName() string {
	return "DeleteDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceRequestValidationError{}

// Validate checks the field values on DeleteDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceResponseMultiError, or nil if none found.
func (m *DeleteDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteDeviceResponseMultiError(errors)
	}

	return nil
}

// DeleteDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceResponseMultiError) AllErrors() []error { return m }

// DeleteDeviceResponseValidationError is the validation error returned by
// DeleteDeviceResponse.Validate if the designated constraints aren't met.
type DeleteDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceResponseValidationError) ErrorName() string {
	return "DeleteDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceResponseValidationError{}

// Validate checks the field values on ListDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDevicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicesRequestMultiError, or nil if none found.
func (m *ListDevicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metadata

	if len(errors) > 0 {
		return ListDevicesRequestMultiError(errors)
	}

	return nil
}

// ListDevicesRequestMultiError is an error wrapping multiple validation errors
// returned by ListDevicesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDevicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicesRequestMultiError) AllErrors() []error { return m }

// ListDevicesRequestValidationError is the validation error returned by
// ListDevicesRequest.Validate if the designated constraints aren't met.
type ListDevicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicesRequestValidationError) ErrorName() string {
	return "ListDevicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicesRequestValidationError{}

// Validate checks the field values on ListDevicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDevicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicesResponseMultiError, or nil if none found.
func (m *ListDevicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDevicesResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDevicesResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDevicesResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDevicesResponseMultiError(errors)
	}

	return nil
}

// ListDevicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListDevicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDevicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicesResponseMultiError) AllErrors() []error { return m }

// ListDevicesResponseValidationError is the validation error returned by
// ListDevicesResponse.Validate if the designated constraints aren't met.
type ListDevicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicesResponseValidationError) ErrorName() string {
	return "ListDevicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicesResponseValidationError{}
