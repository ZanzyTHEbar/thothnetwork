// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/proto/v1/room.proto

package thothnetworkv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Room with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Room) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Room with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoomMultiError, or nil if none found.
func (m *Room) ValidateAll() error {
	return m.validate(true)
}

func (m *Room) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomMultiError(errors)
	}

	return nil
}

// RoomMultiError is an error wrapping multiple validation errors returned by
// Room.ValidateAll() if the designated constraints aren't met.
type RoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomMultiError) AllErrors() []error { return m }

// RoomValidationError is the validation error returned by Room.Validate if the
// designated constraints aren't met.
type RoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomValidationError) ErrorName() string { return "RoomValidationError" }

// Error satisfies the builtin error interface
func (e RoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomValidationError{}

// Validate checks the field values on CreateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomRequestMultiError, or nil if none found.
func (m *CreateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Metadata

	if len(errors) > 0 {
		return CreateRoomRequestMultiError(errors)
	}

	return nil
}

// CreateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomRequestMultiError) AllErrors() []error { return m }

// CreateRoomRequestValidationError is the validation error returned by
// CreateRoomRequest.Validate if the designated constraints aren't met.
type CreateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomRequestValidationError) ErrorName() string {
	return "CreateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomRequestValidationError{}

// Validate checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomResponseMultiError, or nil if none found.
func (m *CreateRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoomResponseMultiError(errors)
	}

	return nil
}

// CreateRoomResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomResponseMultiError) AllErrors() []error { return m }

// CreateRoomResponseValidationError is the validation error returned by
// CreateRoomResponse.Validate if the designated constraints aren't met.
type CreateRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomResponseValidationError) ErrorName() string {
	return "CreateRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomResponseValidationError{}

// Validate checks the field values on GetRoomRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoomRequestMultiError,
// or nil if none found.
func (m *GetRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRoomRequestMultiError(errors)
	}

	return nil
}

// GetRoomRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomRequestMultiError) AllErrors() []error { return m }

// GetRoomRequestValidationError is the validation error returned by
// GetRoomRequest.Validate if the designated constraints aren't met.
type GetRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomRequestValidationError) ErrorName() string { return "GetRoomRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomRequestValidationError{}

// Validate checks the field values on GetRoomResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomResponseMultiError, or nil if none found.
func (m *GetRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoomResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRoomResponseMultiError(errors)
	}

	return nil
}

// GetRoomResponseMultiError is an error wrapping multiple validation errors
// returned by GetRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomResponseMultiError) AllErrors() []error { return m }

// GetRoomResponseValidationError is the validation error returned by
// GetRoomResponse.Validate if the designated constraints aren't met.
type GetRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomResponseValidationError) ErrorName() string { return "GetRoomResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomResponseValidationError{}

// Validate checks the field values on UpdateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoomRequestMultiError, or nil if none found.
func (m *UpdateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Metadata

	if len(errors) > 0 {
		return UpdateRoomRequestMultiError(errors)
	}

	return nil
}

// UpdateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoomRequestMultiError) AllErrors() []error { return m }

// UpdateRoomRequestValidationError is the validation error returned by
// UpdateRoomRequest.Validate if the designated constraints aren't met.
type UpdateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoomRequestValidationError) ErrorName() string {
	return "UpdateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoomRequestValidationError{}

// Validate checks the field values on UpdateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoomResponseMultiError, or nil if none found.
func (m *UpdateRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoomResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoomResponseMultiError(errors)
	}

	return nil
}

// UpdateRoomResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoomResponseMultiError) AllErrors() []error { return m }

// UpdateRoomResponseValidationError is the validation error returned by
// UpdateRoomResponse.Validate if the designated constraints aren't met.
type UpdateRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoomResponseValidationError) ErrorName() string {
	return "UpdateRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoomResponseValidationError{}

// Validate checks the field values on DeleteRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoomRequestMultiError, or nil if none found.
func (m *DeleteRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRoomRequestMultiError(errors)
	}

	return nil
}

// DeleteRoomRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoomRequestMultiError) AllErrors() []error { return m }

// DeleteRoomRequestValidationError is the validation error returned by
// DeleteRoomRequest.Validate if the designated constraints aren't met.
type DeleteRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoomRequestValidationError) ErrorName() string {
	return "DeleteRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoomRequestValidationError{}

// Validate checks the field values on DeleteRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoomResponseMultiError, or nil if none found.
func (m *DeleteRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteRoomResponseMultiError(errors)
	}

	return nil
}

// DeleteRoomResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoomResponseMultiError) AllErrors() []error { return m }

// DeleteRoomResponseValidationError is the validation error returned by
// DeleteRoomResponse.Validate if the designated constraints aren't met.
type DeleteRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoomResponseValidationError) ErrorName() string {
	return "DeleteRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoomResponseValidationError{}

// Validate checks the field values on ListRoomsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoomsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoomsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoomsRequestMultiError, or nil if none found.
func (m *ListRoomsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoomsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	// no validation rules for Metadata

	if len(errors) > 0 {
		return ListRoomsRequestMultiError(errors)
	}

	return nil
}

// ListRoomsRequestMultiError is an error wrapping multiple validation errors
// returned by ListRoomsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRoomsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoomsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoomsRequestMultiError) AllErrors() []error { return m }

// ListRoomsRequestValidationError is the validation error returned by
// ListRoomsRequest.Validate if the designated constraints aren't met.
type ListRoomsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoomsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoomsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoomsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoomsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoomsRequestValidationError) ErrorName() string { return "ListRoomsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRoomsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoomsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoomsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoomsRequestValidationError{}

// Validate checks the field values on ListRoomsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoomsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoomsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoomsResponseMultiError, or nil if none found.
func (m *ListRoomsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoomsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoomsResponseValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoomsResponseMultiError(errors)
	}

	return nil
}

// ListRoomsResponseMultiError is an error wrapping multiple validation errors
// returned by ListRoomsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRoomsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoomsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoomsResponseMultiError) AllErrors() []error { return m }

// ListRoomsResponseValidationError is the validation error returned by
// ListRoomsResponse.Validate if the designated constraints aren't met.
type ListRoomsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoomsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoomsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoomsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoomsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoomsResponseValidationError) ErrorName() string {
	return "ListRoomsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoomsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoomsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoomsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoomsResponseValidationError{}

// Validate checks the field values on AddDeviceToRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDeviceToRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDeviceToRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDeviceToRoomRequestMultiError, or nil if none found.
func (m *AddDeviceToRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDeviceToRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return AddDeviceToRoomRequestMultiError(errors)
	}

	return nil
}

// AddDeviceToRoomRequestMultiError is an error wrapping multiple validation
// errors returned by AddDeviceToRoomRequest.ValidateAll() if the designated
// constraints aren't met.
type AddDeviceToRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDeviceToRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDeviceToRoomRequestMultiError) AllErrors() []error { return m }

// AddDeviceToRoomRequestValidationError is the validation error returned by
// AddDeviceToRoomRequest.Validate if the designated constraints aren't met.
type AddDeviceToRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDeviceToRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDeviceToRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDeviceToRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDeviceToRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDeviceToRoomRequestValidationError) ErrorName() string {
	return "AddDeviceToRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDeviceToRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDeviceToRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDeviceToRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDeviceToRoomRequestValidationError{}

// Validate checks the field values on AddDeviceToRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDeviceToRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDeviceToRoomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDeviceToRoomResponseMultiError, or nil if none found.
func (m *AddDeviceToRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDeviceToRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDeviceToRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDeviceToRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDeviceToRoomResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDeviceToRoomResponseMultiError(errors)
	}

	return nil
}

// AddDeviceToRoomResponseMultiError is an error wrapping multiple validation
// errors returned by AddDeviceToRoomResponse.ValidateAll() if the designated
// constraints aren't met.
type AddDeviceToRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDeviceToRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDeviceToRoomResponseMultiError) AllErrors() []error { return m }

// AddDeviceToRoomResponseValidationError is the validation error returned by
// AddDeviceToRoomResponse.Validate if the designated constraints aren't met.
type AddDeviceToRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDeviceToRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDeviceToRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDeviceToRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDeviceToRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDeviceToRoomResponseValidationError) ErrorName() string {
	return "AddDeviceToRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDeviceToRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDeviceToRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDeviceToRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDeviceToRoomResponseValidationError{}

// Validate checks the field values on RemoveDeviceFromRoomRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDeviceFromRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDeviceFromRoomRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveDeviceFromRoomRequestMultiError, or nil if none found.
func (m *RemoveDeviceFromRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDeviceFromRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return RemoveDeviceFromRoomRequestMultiError(errors)
	}

	return nil
}

// RemoveDeviceFromRoomRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveDeviceFromRoomRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveDeviceFromRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDeviceFromRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDeviceFromRoomRequestMultiError) AllErrors() []error { return m }

// RemoveDeviceFromRoomRequestValidationError is the validation error returned
// by RemoveDeviceFromRoomRequest.Validate if the designated constraints
// aren't met.
type RemoveDeviceFromRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDeviceFromRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDeviceFromRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDeviceFromRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDeviceFromRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDeviceFromRoomRequestValidationError) ErrorName() string {
	return "RemoveDeviceFromRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDeviceFromRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDeviceFromRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDeviceFromRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDeviceFromRoomRequestValidationError{}

// Validate checks the field values on RemoveDeviceFromRoomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDeviceFromRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDeviceFromRoomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveDeviceFromRoomResponseMultiError, or nil if none found.
func (m *RemoveDeviceFromRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDeviceFromRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveDeviceFromRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveDeviceFromRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveDeviceFromRoomResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveDeviceFromRoomResponseMultiError(errors)
	}

	return nil
}

// RemoveDeviceFromRoomResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveDeviceFromRoomResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveDeviceFromRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDeviceFromRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDeviceFromRoomResponseMultiError) AllErrors() []error { return m }

// RemoveDeviceFromRoomResponseValidationError is the validation error returned
// by RemoveDeviceFromRoomResponse.Validate if the designated constraints
// aren't met.
type RemoveDeviceFromRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDeviceFromRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDeviceFromRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDeviceFromRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDeviceFromRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDeviceFromRoomResponseValidationError) ErrorName() string {
	return "RemoveDeviceFromRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDeviceFromRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDeviceFromRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDeviceFromRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDeviceFromRoomResponseValidationError{}

// Validate checks the field values on ListDevicesInRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDevicesInRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicesInRoomRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicesInRoomRequestMultiError, or nil if none found.
func (m *ListDevicesInRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicesInRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return ListDevicesInRoomRequestMultiError(errors)
	}

	return nil
}

// ListDevicesInRoomRequestMultiError is an error wrapping multiple validation
// errors returned by ListDevicesInRoomRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDevicesInRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicesInRoomRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicesInRoomRequestMultiError) AllErrors() []error { return m }

// ListDevicesInRoomRequestValidationError is the validation error returned by
// ListDevicesInRoomRequest.Validate if the designated constraints aren't met.
type ListDevicesInRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicesInRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicesInRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicesInRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicesInRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicesInRoomRequestValidationError) ErrorName() string {
	return "ListDevicesInRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevicesInRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicesInRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicesInRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicesInRoomRequestValidationError{}

// Validate checks the field values on ListDevicesInRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDevicesInRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicesInRoomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicesInRoomResponseMultiError, or nil if none found.
func (m *ListDevicesInRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicesInRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDevicesInRoomResponseMultiError(errors)
	}

	return nil
}

// ListDevicesInRoomResponseMultiError is an error wrapping multiple validation
// errors returned by ListDevicesInRoomResponse.ValidateAll() if the
// designated constraints aren't met.
type ListDevicesInRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicesInRoomResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicesInRoomResponseMultiError) AllErrors() []error { return m }

// ListDevicesInRoomResponseValidationError is the validation error returned by
// ListDevicesInRoomResponse.Validate if the designated constraints aren't met.
type ListDevicesInRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicesInRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicesInRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicesInRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicesInRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicesInRoomResponseValidationError) ErrorName() string {
	return "ListDevicesInRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevicesInRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicesInRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicesInRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicesInRoomResponseValidationError{}

// Validate checks the field values on FindRoomsForDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindRoomsForDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRoomsForDeviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindRoomsForDeviceRequestMultiError, or nil if none found.
func (m *FindRoomsForDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRoomsForDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return FindRoomsForDeviceRequestMultiError(errors)
	}

	return nil
}

// FindRoomsForDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by FindRoomsForDeviceRequest.ValidateAll() if the
// designated constraints aren't met.
type FindRoomsForDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRoomsForDeviceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRoomsForDeviceRequestMultiError) AllErrors() []error { return m }

// FindRoomsForDeviceRequestValidationError is the validation error returned by
// FindRoomsForDeviceRequest.Validate if the designated constraints aren't met.
type FindRoomsForDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRoomsForDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRoomsForDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRoomsForDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRoomsForDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRoomsForDeviceRequestValidationError) ErrorName() string {
	return "FindRoomsForDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindRoomsForDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRoomsForDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRoomsForDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRoomsForDeviceRequestValidationError{}

// Validate checks the field values on FindRoomsForDeviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindRoomsForDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRoomsForDeviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindRoomsForDeviceResponseMultiError, or nil if none found.
func (m *FindRoomsForDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRoomsForDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindRoomsForDeviceResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindRoomsForDeviceResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindRoomsForDeviceResponseValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindRoomsForDeviceResponseMultiError(errors)
	}

	return nil
}

// FindRoomsForDeviceResponseMultiError is an error wrapping multiple
// validation errors returned by FindRoomsForDeviceResponse.ValidateAll() if
// the designated constraints aren't met.
type FindRoomsForDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRoomsForDeviceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRoomsForDeviceResponseMultiError) AllErrors() []error { return m }

// FindRoomsForDeviceResponseValidationError is the validation error returned
// by FindRoomsForDeviceResponse.Validate if the designated constraints aren't met.
type FindRoomsForDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRoomsForDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRoomsForDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRoomsForDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRoomsForDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRoomsForDeviceResponseValidationError) ErrorName() string {
	return "FindRoomsForDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindRoomsForDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRoomsForDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRoomsForDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRoomsForDeviceResponseValidationError{}
