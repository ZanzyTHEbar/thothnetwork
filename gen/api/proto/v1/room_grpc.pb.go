// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/proto/v1/room.proto

package thothnetworkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoomService_CreateRoom_FullMethodName           = "/thothnetwork.v1.RoomService/CreateRoom"
	RoomService_GetRoom_FullMethodName              = "/thothnetwork.v1.RoomService/GetRoom"
	RoomService_UpdateRoom_FullMethodName           = "/thothnetwork.v1.RoomService/UpdateRoom"
	RoomService_DeleteRoom_FullMethodName           = "/thothnetwork.v1.RoomService/DeleteRoom"
	RoomService_ListRooms_FullMethodName            = "/thothnetwork.v1.RoomService/ListRooms"
	RoomService_AddDeviceToRoom_FullMethodName      = "/thothnetwork.v1.RoomService/AddDeviceToRoom"
	RoomService_RemoveDeviceFromRoom_FullMethodName = "/thothnetwork.v1.RoomService/RemoveDeviceFromRoom"
	RoomService_ListDevicesInRoom_FullMethodName    = "/thothnetwork.v1.RoomService/ListDevicesInRoom"
	RoomService_FindRoomsForDevice_FullMethodName   = "/thothnetwork.v1.RoomService/FindRoomsForDevice"
)

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RoomService provides room management functionality
type RoomServiceClient interface {
	// CreateRoom creates a new room
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	// GetRoom retrieves a room by ID
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	// UpdateRoom updates an existing room
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error)
	// DeleteRoom deletes a room
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error)
	// ListRooms lists rooms with optional filtering
	ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	// AddDeviceToRoom adds a device to a room
	AddDeviceToRoom(ctx context.Context, in *AddDeviceToRoomRequest, opts ...grpc.CallOption) (*AddDeviceToRoomResponse, error)
	// RemoveDeviceFromRoom removes a device from a room
	RemoveDeviceFromRoom(ctx context.Context, in *RemoveDeviceFromRoomRequest, opts ...grpc.CallOption) (*RemoveDeviceFromRoomResponse, error)
	// ListDevicesInRoom lists all devices in a room
	ListDevicesInRoom(ctx context.Context, in *ListDevicesInRoomRequest, opts ...grpc.CallOption) (*ListDevicesInRoomResponse, error)
	// FindRoomsForDevice finds all rooms that contain a specific device
	FindRoomsForDevice(ctx context.Context, in *FindRoomsForDeviceRequest, opts ...grpc.CallOption) (*FindRoomsForDeviceResponse, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, RoomService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, RoomService_GetRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoomResponse)
	err := c.cc.Invoke(ctx, RoomService_UpdateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoomResponse)
	err := c.cc.Invoke(ctx, RoomService_DeleteRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, RoomService_ListRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) AddDeviceToRoom(ctx context.Context, in *AddDeviceToRoomRequest, opts ...grpc.CallOption) (*AddDeviceToRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDeviceToRoomResponse)
	err := c.cc.Invoke(ctx, RoomService_AddDeviceToRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) RemoveDeviceFromRoom(ctx context.Context, in *RemoveDeviceFromRoomRequest, opts ...grpc.CallOption) (*RemoveDeviceFromRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDeviceFromRoomResponse)
	err := c.cc.Invoke(ctx, RoomService_RemoveDeviceFromRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) ListDevicesInRoom(ctx context.Context, in *ListDevicesInRoomRequest, opts ...grpc.CallOption) (*ListDevicesInRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevicesInRoomResponse)
	err := c.cc.Invoke(ctx, RoomService_ListDevicesInRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) FindRoomsForDevice(ctx context.Context, in *FindRoomsForDeviceRequest, opts ...grpc.CallOption) (*FindRoomsForDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindRoomsForDeviceResponse)
	err := c.cc.Invoke(ctx, RoomService_FindRoomsForDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServiceServer is the server API for RoomService service.
// All implementations must embed UnimplementedRoomServiceServer
// for forward compatibility.
//
// RoomService provides room management functionality
type RoomServiceServer interface {
	// CreateRoom creates a new room
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	// GetRoom retrieves a room by ID
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	// UpdateRoom updates an existing room
	UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error)
	// DeleteRoom deletes a room
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	// ListRooms lists rooms with optional filtering
	ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error)
	// AddDeviceToRoom adds a device to a room
	AddDeviceToRoom(context.Context, *AddDeviceToRoomRequest) (*AddDeviceToRoomResponse, error)
	// RemoveDeviceFromRoom removes a device from a room
	RemoveDeviceFromRoom(context.Context, *RemoveDeviceFromRoomRequest) (*RemoveDeviceFromRoomResponse, error)
	// ListDevicesInRoom lists all devices in a room
	ListDevicesInRoom(context.Context, *ListDevicesInRoomRequest) (*ListDevicesInRoomResponse, error)
	// FindRoomsForDevice finds all rooms that contain a specific device
	FindRoomsForDevice(context.Context, *FindRoomsForDeviceRequest) (*FindRoomsForDeviceResponse, error)
	mustEmbedUnimplementedRoomServiceServer()
}

// UnimplementedRoomServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoomServiceServer struct{}

func (UnimplementedRoomServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomServiceServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedRoomServiceServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedRoomServiceServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedRoomServiceServer) ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedRoomServiceServer) AddDeviceToRoom(context.Context, *AddDeviceToRoomRequest) (*AddDeviceToRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceToRoom not implemented")
}
func (UnimplementedRoomServiceServer) RemoveDeviceFromRoom(context.Context, *RemoveDeviceFromRoomRequest) (*RemoveDeviceFromRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeviceFromRoom not implemented")
}
func (UnimplementedRoomServiceServer) ListDevicesInRoom(context.Context, *ListDevicesInRoomRequest) (*ListDevicesInRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevicesInRoom not implemented")
}
func (UnimplementedRoomServiceServer) FindRoomsForDevice(context.Context, *FindRoomsForDeviceRequest) (*FindRoomsForDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoomsForDevice not implemented")
}
func (UnimplementedRoomServiceServer) mustEmbedUnimplementedRoomServiceServer() {}
func (UnimplementedRoomServiceServer) testEmbeddedByValue()                     {}

// UnsafeRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServiceServer will
// result in compilation errors.
type UnsafeRoomServiceServer interface {
	mustEmbedUnimplementedRoomServiceServer()
}

func RegisterRoomServiceServer(s grpc.ServiceRegistrar, srv RoomServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoomServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoomService_ServiceDesc, srv)
}

func _RoomService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_UpdateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_ListRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).ListRooms(ctx, req.(*ListRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_AddDeviceToRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceToRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).AddDeviceToRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_AddDeviceToRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).AddDeviceToRoom(ctx, req.(*AddDeviceToRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_RemoveDeviceFromRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeviceFromRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RemoveDeviceFromRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_RemoveDeviceFromRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RemoveDeviceFromRoom(ctx, req.(*RemoveDeviceFromRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_ListDevicesInRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesInRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).ListDevicesInRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_ListDevicesInRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).ListDevicesInRoom(ctx, req.(*ListDevicesInRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_FindRoomsForDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRoomsForDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).FindRoomsForDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomService_FindRoomsForDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).FindRoomsForDevice(ctx, req.(*FindRoomsForDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomService_ServiceDesc is the grpc.ServiceDesc for RoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thothnetwork.v1.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RoomService_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _RoomService_GetRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _RoomService_UpdateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _RoomService_DeleteRoom_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _RoomService_ListRooms_Handler,
		},
		{
			MethodName: "AddDeviceToRoom",
			Handler:    _RoomService_AddDeviceToRoom_Handler,
		},
		{
			MethodName: "RemoveDeviceFromRoom",
			Handler:    _RoomService_RemoveDeviceFromRoom_Handler,
		},
		{
			MethodName: "ListDevicesInRoom",
			Handler:    _RoomService_ListDevicesInRoom_Handler,
		},
		{
			MethodName: "FindRoomsForDevice",
			Handler:    _RoomService_FindRoomsForDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/room.proto",
}
