// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/proto/v1/twin.proto

package thothnetworkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TwinService_GetTwin_FullMethodName           = "/thothnetwork.v1.TwinService/GetTwin"
	TwinService_UpdateTwinState_FullMethodName   = "/thothnetwork.v1.TwinService/UpdateTwinState"
	TwinService_UpdateTwinDesired_FullMethodName = "/thothnetwork.v1.TwinService/UpdateTwinDesired"
	TwinService_DeleteTwin_FullMethodName        = "/thothnetwork.v1.TwinService/DeleteTwin"
)

// TwinServiceClient is the client API for TwinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TwinService provides digital twin management functionality
type TwinServiceClient interface {
	// GetTwin retrieves a digital twin by device ID
	GetTwin(ctx context.Context, in *GetTwinRequest, opts ...grpc.CallOption) (*GetTwinResponse, error)
	// UpdateTwinState updates the state of a digital twin
	UpdateTwinState(ctx context.Context, in *UpdateTwinStateRequest, opts ...grpc.CallOption) (*UpdateTwinStateResponse, error)
	// UpdateTwinDesired updates the desired state of a digital twin
	UpdateTwinDesired(ctx context.Context, in *UpdateTwinDesiredRequest, opts ...grpc.CallOption) (*UpdateTwinDesiredResponse, error)
	// DeleteTwin deletes a digital twin
	DeleteTwin(ctx context.Context, in *DeleteTwinRequest, opts ...grpc.CallOption) (*DeleteTwinResponse, error)
}

type twinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwinServiceClient(cc grpc.ClientConnInterface) TwinServiceClient {
	return &twinServiceClient{cc}
}

func (c *twinServiceClient) GetTwin(ctx context.Context, in *GetTwinRequest, opts ...grpc.CallOption) (*GetTwinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTwinResponse)
	err := c.cc.Invoke(ctx, TwinService_GetTwin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinServiceClient) UpdateTwinState(ctx context.Context, in *UpdateTwinStateRequest, opts ...grpc.CallOption) (*UpdateTwinStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTwinStateResponse)
	err := c.cc.Invoke(ctx, TwinService_UpdateTwinState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinServiceClient) UpdateTwinDesired(ctx context.Context, in *UpdateTwinDesiredRequest, opts ...grpc.CallOption) (*UpdateTwinDesiredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTwinDesiredResponse)
	err := c.cc.Invoke(ctx, TwinService_UpdateTwinDesired_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinServiceClient) DeleteTwin(ctx context.Context, in *DeleteTwinRequest, opts ...grpc.CallOption) (*DeleteTwinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTwinResponse)
	err := c.cc.Invoke(ctx, TwinService_DeleteTwin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwinServiceServer is the server API for TwinService service.
// All implementations must embed UnimplementedTwinServiceServer
// for forward compatibility.
//
// TwinService provides digital twin management functionality
type TwinServiceServer interface {
	// GetTwin retrieves a digital twin by device ID
	GetTwin(context.Context, *GetTwinRequest) (*GetTwinResponse, error)
	// UpdateTwinState updates the state of a digital twin
	UpdateTwinState(context.Context, *UpdateTwinStateRequest) (*UpdateTwinStateResponse, error)
	// UpdateTwinDesired updates the desired state of a digital twin
	UpdateTwinDesired(context.Context, *UpdateTwinDesiredRequest) (*UpdateTwinDesiredResponse, error)
	// DeleteTwin deletes a digital twin
	DeleteTwin(context.Context, *DeleteTwinRequest) (*DeleteTwinResponse, error)
	mustEmbedUnimplementedTwinServiceServer()
}

// UnimplementedTwinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTwinServiceServer struct{}

func (UnimplementedTwinServiceServer) GetTwin(context.Context, *GetTwinRequest) (*GetTwinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwin not implemented")
}
func (UnimplementedTwinServiceServer) UpdateTwinState(context.Context, *UpdateTwinStateRequest) (*UpdateTwinStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTwinState not implemented")
}
func (UnimplementedTwinServiceServer) UpdateTwinDesired(context.Context, *UpdateTwinDesiredRequest) (*UpdateTwinDesiredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTwinDesired not implemented")
}
func (UnimplementedTwinServiceServer) DeleteTwin(context.Context, *DeleteTwinRequest) (*DeleteTwinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTwin not implemented")
}
func (UnimplementedTwinServiceServer) mustEmbedUnimplementedTwinServiceServer() {}
func (UnimplementedTwinServiceServer) testEmbeddedByValue()                     {}

// UnsafeTwinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwinServiceServer will
// result in compilation errors.
type UnsafeTwinServiceServer interface {
	mustEmbedUnimplementedTwinServiceServer()
}

func RegisterTwinServiceServer(s grpc.ServiceRegistrar, srv TwinServiceServer) {
	// If the following call pancis, it indicates UnimplementedTwinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TwinService_ServiceDesc, srv)
}

func _TwinService_GetTwin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinServiceServer).GetTwin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwinService_GetTwin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinServiceServer).GetTwin(ctx, req.(*GetTwinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinService_UpdateTwinState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTwinStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinServiceServer).UpdateTwinState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwinService_UpdateTwinState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinServiceServer).UpdateTwinState(ctx, req.(*UpdateTwinStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinService_UpdateTwinDesired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTwinDesiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinServiceServer).UpdateTwinDesired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwinService_UpdateTwinDesired_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinServiceServer).UpdateTwinDesired(ctx, req.(*UpdateTwinDesiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinService_DeleteTwin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTwinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinServiceServer).DeleteTwin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwinService_DeleteTwin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinServiceServer).DeleteTwin(ctx, req.(*DeleteTwinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwinService_ServiceDesc is the grpc.ServiceDesc for TwinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thothnetwork.v1.TwinService",
	HandlerType: (*TwinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTwin",
			Handler:    _TwinService_GetTwin_Handler,
		},
		{
			MethodName: "UpdateTwinState",
			Handler:    _TwinService_UpdateTwinState_Handler,
		},
		{
			MethodName: "UpdateTwinDesired",
			Handler:    _TwinService_UpdateTwinDesired_Handler,
		},
		{
			MethodName: "DeleteTwin",
			Handler:    _TwinService_DeleteTwin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/twin.proto",
}
