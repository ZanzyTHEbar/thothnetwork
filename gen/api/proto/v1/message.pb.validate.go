// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/proto/v1/message.proto

package thothnetworkv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Source

	// no validation rules for Target

	// no validation rules for Type

	// no validation rules for Payload

	// no validation rules for ContentType

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on PublishMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishMessageRequestMultiError, or nil if none found.
func (m *PublishMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Target

	// no validation rules for Type

	// no validation rules for Payload

	// no validation rules for ContentType

	// no validation rules for Metadata

	// no validation rules for Topic

	if len(errors) > 0 {
		return PublishMessageRequestMultiError(errors)
	}

	return nil
}

// PublishMessageRequestMultiError is an error wrapping multiple validation
// errors returned by PublishMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishMessageRequestMultiError) AllErrors() []error { return m }

// PublishMessageRequestValidationError is the validation error returned by
// PublishMessageRequest.Validate if the designated constraints aren't met.
type PublishMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishMessageRequestValidationError) ErrorName() string {
	return "PublishMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishMessageRequestValidationError{}

// Validate checks the field values on PublishMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishMessageResponseMultiError, or nil if none found.
func (m *PublishMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishMessageResponseMultiError(errors)
	}

	return nil
}

// PublishMessageResponseMultiError is an error wrapping multiple validation
// errors returned by PublishMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishMessageResponseMultiError) AllErrors() []error { return m }

// PublishMessageResponseValidationError is the validation error returned by
// PublishMessageResponse.Validate if the designated constraints aren't met.
type PublishMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishMessageResponseValidationError) ErrorName() string {
	return "PublishMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishMessageResponseValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on SubscribeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeResponseMultiError, or nil if none found.
func (m *SubscribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscribeResponseMultiError(errors)
	}

	return nil
}

// SubscribeResponseMultiError is an error wrapping multiple validation errors
// returned by SubscribeResponse.ValidateAll() if the designated constraints
// aren't met.
type SubscribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeResponseMultiError) AllErrors() []error { return m }

// SubscribeResponseValidationError is the validation error returned by
// SubscribeResponse.Validate if the designated constraints aren't met.
type SubscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeResponseValidationError) ErrorName() string {
	return "SubscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeResponseValidationError{}

// Validate checks the field values on UnsubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeRequestMultiError, or nil if none found.
func (m *UnsubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	if len(errors) > 0 {
		return UnsubscribeRequestMultiError(errors)
	}

	return nil
}

// UnsubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by UnsubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type UnsubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeRequestMultiError) AllErrors() []error { return m }

// UnsubscribeRequestValidationError is the validation error returned by
// UnsubscribeRequest.Validate if the designated constraints aren't met.
type UnsubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeRequestValidationError) ErrorName() string {
	return "UnsubscribeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeRequestValidationError{}

// Validate checks the field values on UnsubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeResponseMultiError, or nil if none found.
func (m *UnsubscribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UnsubscribeResponseMultiError(errors)
	}

	return nil
}

// UnsubscribeResponseMultiError is an error wrapping multiple validation
// errors returned by UnsubscribeResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsubscribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeResponseMultiError) AllErrors() []error { return m }

// UnsubscribeResponseValidationError is the validation error returned by
// UnsubscribeResponse.Validate if the designated constraints aren't met.
type UnsubscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeResponseValidationError) ErrorName() string {
	return "UnsubscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeResponseValidationError{}

// Validate checks the field values on CreateStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStreamRequestMultiError, or nil if none found.
func (m *CreateStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateStreamRequestMultiError(errors)
	}

	return nil
}

// CreateStreamRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStreamRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStreamRequestMultiError) AllErrors() []error { return m }

// CreateStreamRequestValidationError is the validation error returned by
// CreateStreamRequest.Validate if the designated constraints aren't met.
type CreateStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStreamRequestValidationError) ErrorName() string {
	return "CreateStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStreamRequestValidationError{}

// Validate checks the field values on CreateStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStreamResponseMultiError, or nil if none found.
func (m *CreateStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return CreateStreamResponseMultiError(errors)
	}

	return nil
}

// CreateStreamResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStreamResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStreamResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStreamResponseMultiError) AllErrors() []error { return m }

// CreateStreamResponseValidationError is the validation error returned by
// CreateStreamResponse.Validate if the designated constraints aren't met.
type CreateStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStreamResponseValidationError) ErrorName() string {
	return "CreateStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStreamResponseValidationError{}

// Validate checks the field values on DeleteStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStreamRequestMultiError, or nil if none found.
func (m *DeleteStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteStreamRequestMultiError(errors)
	}

	return nil
}

// DeleteStreamRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStreamRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStreamRequestMultiError) AllErrors() []error { return m }

// DeleteStreamRequestValidationError is the validation error returned by
// DeleteStreamRequest.Validate if the designated constraints aren't met.
type DeleteStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStreamRequestValidationError) ErrorName() string {
	return "DeleteStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStreamRequestValidationError{}

// Validate checks the field values on DeleteStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStreamResponseMultiError, or nil if none found.
func (m *DeleteStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteStreamResponseMultiError(errors)
	}

	return nil
}

// DeleteStreamResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteStreamResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStreamResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStreamResponseMultiError) AllErrors() []error { return m }

// DeleteStreamResponseValidationError is the validation error returned by
// DeleteStreamResponse.Validate if the designated constraints aren't met.
type DeleteStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStreamResponseValidationError) ErrorName() string {
	return "DeleteStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStreamResponseValidationError{}
