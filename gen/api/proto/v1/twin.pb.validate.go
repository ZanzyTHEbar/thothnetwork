// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/proto/v1/twin.proto

package thothnetworkv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DigitalTwin with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DigitalTwin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DigitalTwin with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DigitalTwinMultiError, or
// nil if none found.
func (m *DigitalTwin) ValidateAll() error {
	return m.validate(true)
}

func (m *DigitalTwin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DigitalTwinValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DigitalTwinValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DigitalTwinValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDesired()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DigitalTwinValidationError{
					field:  "Desired",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DigitalTwinValidationError{
					field:  "Desired",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesired()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DigitalTwinValidationError{
				field:  "Desired",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetLastUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DigitalTwinValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DigitalTwinValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DigitalTwinValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DigitalTwinValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DigitalTwinValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DigitalTwinValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DigitalTwinMultiError(errors)
	}

	return nil
}

// DigitalTwinMultiError is an error wrapping multiple validation errors
// returned by DigitalTwin.ValidateAll() if the designated constraints aren't met.
type DigitalTwinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DigitalTwinMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DigitalTwinMultiError) AllErrors() []error { return m }

// DigitalTwinValidationError is the validation error returned by
// DigitalTwin.Validate if the designated constraints aren't met.
type DigitalTwinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DigitalTwinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DigitalTwinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DigitalTwinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DigitalTwinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DigitalTwinValidationError) ErrorName() string { return "DigitalTwinValidationError" }

// Error satisfies the builtin error interface
func (e DigitalTwinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDigitalTwin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DigitalTwinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DigitalTwinValidationError{}

// Validate checks the field values on GetTwinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTwinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTwinRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTwinRequestMultiError,
// or nil if none found.
func (m *GetTwinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTwinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return GetTwinRequestMultiError(errors)
	}

	return nil
}

// GetTwinRequestMultiError is an error wrapping multiple validation errors
// returned by GetTwinRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTwinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTwinRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTwinRequestMultiError) AllErrors() []error { return m }

// GetTwinRequestValidationError is the validation error returned by
// GetTwinRequest.Validate if the designated constraints aren't met.
type GetTwinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTwinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTwinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTwinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTwinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTwinRequestValidationError) ErrorName() string { return "GetTwinRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTwinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTwinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTwinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTwinRequestValidationError{}

// Validate checks the field values on GetTwinResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTwinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTwinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTwinResponseMultiError, or nil if none found.
func (m *GetTwinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTwinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTwin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTwinResponseValidationError{
					field:  "Twin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTwinResponseValidationError{
					field:  "Twin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTwin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTwinResponseValidationError{
				field:  "Twin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTwinResponseMultiError(errors)
	}

	return nil
}

// GetTwinResponseMultiError is an error wrapping multiple validation errors
// returned by GetTwinResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTwinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTwinResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTwinResponseMultiError) AllErrors() []error { return m }

// GetTwinResponseValidationError is the validation error returned by
// GetTwinResponse.Validate if the designated constraints aren't met.
type GetTwinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTwinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTwinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTwinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTwinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTwinResponseValidationError) ErrorName() string { return "GetTwinResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTwinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTwinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTwinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTwinResponseValidationError{}

// Validate checks the field values on UpdateTwinStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTwinStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTwinStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTwinStateRequestMultiError, or nil if none found.
func (m *UpdateTwinStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTwinStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTwinStateRequestValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTwinStateRequestValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTwinStateRequestValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTwinStateRequestMultiError(errors)
	}

	return nil
}

// UpdateTwinStateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTwinStateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTwinStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTwinStateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTwinStateRequestMultiError) AllErrors() []error { return m }

// UpdateTwinStateRequestValidationError is the validation error returned by
// UpdateTwinStateRequest.Validate if the designated constraints aren't met.
type UpdateTwinStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTwinStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTwinStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTwinStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTwinStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTwinStateRequestValidationError) ErrorName() string {
	return "UpdateTwinStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTwinStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTwinStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTwinStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTwinStateRequestValidationError{}

// Validate checks the field values on UpdateTwinStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTwinStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTwinStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTwinStateResponseMultiError, or nil if none found.
func (m *UpdateTwinStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTwinStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTwin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTwinStateResponseValidationError{
					field:  "Twin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTwinStateResponseValidationError{
					field:  "Twin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTwin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTwinStateResponseValidationError{
				field:  "Twin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTwinStateResponseMultiError(errors)
	}

	return nil
}

// UpdateTwinStateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTwinStateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTwinStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTwinStateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTwinStateResponseMultiError) AllErrors() []error { return m }

// UpdateTwinStateResponseValidationError is the validation error returned by
// UpdateTwinStateResponse.Validate if the designated constraints aren't met.
type UpdateTwinStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTwinStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTwinStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTwinStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTwinStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTwinStateResponseValidationError) ErrorName() string {
	return "UpdateTwinStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTwinStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTwinStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTwinStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTwinStateResponseValidationError{}

// Validate checks the field values on UpdateTwinDesiredRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTwinDesiredRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTwinDesiredRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTwinDesiredRequestMultiError, or nil if none found.
func (m *UpdateTwinDesiredRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTwinDesiredRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if all {
		switch v := interface{}(m.GetDesired()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTwinDesiredRequestValidationError{
					field:  "Desired",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTwinDesiredRequestValidationError{
					field:  "Desired",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesired()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTwinDesiredRequestValidationError{
				field:  "Desired",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTwinDesiredRequestMultiError(errors)
	}

	return nil
}

// UpdateTwinDesiredRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTwinDesiredRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTwinDesiredRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTwinDesiredRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTwinDesiredRequestMultiError) AllErrors() []error { return m }

// UpdateTwinDesiredRequestValidationError is the validation error returned by
// UpdateTwinDesiredRequest.Validate if the designated constraints aren't met.
type UpdateTwinDesiredRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTwinDesiredRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTwinDesiredRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTwinDesiredRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTwinDesiredRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTwinDesiredRequestValidationError) ErrorName() string {
	return "UpdateTwinDesiredRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTwinDesiredRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTwinDesiredRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTwinDesiredRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTwinDesiredRequestValidationError{}

// Validate checks the field values on UpdateTwinDesiredResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTwinDesiredResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTwinDesiredResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTwinDesiredResponseMultiError, or nil if none found.
func (m *UpdateTwinDesiredResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTwinDesiredResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTwin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTwinDesiredResponseValidationError{
					field:  "Twin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTwinDesiredResponseValidationError{
					field:  "Twin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTwin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTwinDesiredResponseValidationError{
				field:  "Twin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDelta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTwinDesiredResponseValidationError{
					field:  "Delta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTwinDesiredResponseValidationError{
					field:  "Delta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDelta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTwinDesiredResponseValidationError{
				field:  "Delta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTwinDesiredResponseMultiError(errors)
	}

	return nil
}

// UpdateTwinDesiredResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTwinDesiredResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateTwinDesiredResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTwinDesiredResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTwinDesiredResponseMultiError) AllErrors() []error { return m }

// UpdateTwinDesiredResponseValidationError is the validation error returned by
// UpdateTwinDesiredResponse.Validate if the designated constraints aren't met.
type UpdateTwinDesiredResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTwinDesiredResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTwinDesiredResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTwinDesiredResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTwinDesiredResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTwinDesiredResponseValidationError) ErrorName() string {
	return "UpdateTwinDesiredResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTwinDesiredResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTwinDesiredResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTwinDesiredResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTwinDesiredResponseValidationError{}

// Validate checks the field values on DeleteTwinRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTwinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTwinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTwinRequestMultiError, or nil if none found.
func (m *DeleteTwinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTwinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return DeleteTwinRequestMultiError(errors)
	}

	return nil
}

// DeleteTwinRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTwinRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTwinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTwinRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTwinRequestMultiError) AllErrors() []error { return m }

// DeleteTwinRequestValidationError is the validation error returned by
// DeleteTwinRequest.Validate if the designated constraints aren't met.
type DeleteTwinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTwinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTwinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTwinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTwinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTwinRequestValidationError) ErrorName() string {
	return "DeleteTwinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTwinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTwinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTwinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTwinRequestValidationError{}

// Validate checks the field values on DeleteTwinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTwinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTwinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTwinResponseMultiError, or nil if none found.
func (m *DeleteTwinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTwinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteTwinResponseMultiError(errors)
	}

	return nil
}

// DeleteTwinResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteTwinResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteTwinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTwinResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTwinResponseMultiError) AllErrors() []error { return m }

// DeleteTwinResponseValidationError is the validation error returned by
// DeleteTwinResponse.Validate if the designated constraints aren't met.
type DeleteTwinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTwinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTwinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTwinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTwinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTwinResponseValidationError) ErrorName() string {
	return "DeleteTwinResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTwinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTwinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTwinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTwinResponseValidationError{}
